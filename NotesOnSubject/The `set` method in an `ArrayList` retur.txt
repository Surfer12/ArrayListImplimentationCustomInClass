The `set` method in an `ArrayList` returns the old element as a part of its operation for a few reasons:

1. **Confirmation of Change**: Returning the old element provides immediate feedback about what was previously at that position in the list. This can be useful for checking what was replaced without requiring additional operations.

2. **Convenience**: It allows the caller to use the old value directly if needed, without having to perform a separate `get` operation before the `set`. This can be particularly useful in scenarios where the old value needs to be processed or logged.

3. **Consistency with Collection APIs**: This behavior is consistent with similar methods in other parts of the Java Collections Framework. For example, the `Map` interface's `put` method also returns the old value associated with a key. This consistency helps in making the API easier to understand and use.

4. **Error Checking**: By providing the old value, it indirectly confirms that the set operation was successful at the intended index. If the index was out of bounds, the method would not return an old value but instead throw an exception.

This design choice enhances the functionality and usability of the `set` method, making it more informative and versatile for programming needs. However, if the old value is not needed, it can simply be ignored or discarded by the caller.